<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!-- 1. 配置 SecurityManager,Shiro核心安全管理器接口-->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm" />
	    <property name="cacheManager" ref="shiroCacheManager" />
    </bean>

    <!-- 2. 配置 CacheManager.缓存授权（注意是授权而不是认证）信息、不然每次访问都要授权(走doGetAuthorizationInfo方法)（关闭浏览器失效） -->
	<!--这里说明一下，这里配置的缓存只对授权有效。我们自己创建的Real继承了AuthorizingRealm类，自定义Realm其实是具有对认证（用户密码等）缓存的，
	      不配置CacheManager也可以实现认证的缓存-->
    <!--  2.1 配置简单的非shiro自己实现的缓存
    <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />
    -->
    <!--  2.2 配置ehcache缓存,需要加入ehcache的jar包及配置文件-->
	<bean id="ehCacheManager"
		  class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml" />
		<property name="shared" value="true"></property>
	</bean>

	<!-- 缓存管理器 使用Ehcache实现-->
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>

    <!-- 3. 配置Realm,自定义认证与授权-->

	<!-- 3.1 不对密码加密
	<bean id="myRealm" class="com.qiqi.account.shiro.core.Realm" />
	-->

	<!-- 3.2 对密码加密 -->
	<bean id="myRealm" class="com.qiqi.account.shiro.core.Realm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="MD5"></property>
				<property name="hashIterations" value="1024"></property>
			</bean>
		</property>
	</bean>

    <!-- 4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 5. 启用IOC容器中使用shiro的注解,但必须在配置了LifecycleBeanPostProcessor之后才可以使用-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- 6. 配置 ShiroFilter.
      6.1 id必须和web.xml文件中配置的DelegatingFilterProxy的<filter-name>一致.若不一致,则会抛出:
      NoSuchBeanDefinitionException.因为Shiro会来IOC容器中查找和<filter-name>名字对应的filter bean.
    -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接 -->
		<property name="loginUrl" value="/ui/login" />
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<property name="unauthorizedUrl" value="unauthorized" />
		<!-- Shiro过滤链的定义 -->
		<!-- anon: 该认证拦截器表示匿名访问（即不需要登录即可访问）就是不需要走loginurl,
		           也就是不拦截该路径，一般用于静态资源过滤 -->
		<!-- authc：该认证拦截器表示需要身份认证通过后才能访问（Subject.login（isAuthenticated()==true）才可以，否则进入loginUrl）-->
		<!-- roles[admin]：该授权拦截器表示需要有admin角色授权才能访问 -->
		<!-- perms["user:create"]：该授权拦截器表示需要有“user:create”权限才能访问-->
		<!-- user:该认证拦截器,用户已经身份验证/记住我登录的即可（(isRemembered()||isAuthenticated())==true）-->
		<property name="filterChainDefinitions">
			<value>
				/test=anon
				/logout = anon
				/ui/checkLogin = anon
				<!-- 过滤静态资源 如js、css、图片-->
				/public/**=anon
				/js/**=anon
				/*.ico=anon
				/webjars/**=anon

                 <!--授权配置-->
				/ui/user = authc,roles[user] <!--需要认证并且有user角色-->
				/ui/admin = authc,roles[admin]
                /ui/index = user<!--认证过或“记住我”都可访问list.js-->

				/** = authc
			</value>
		</property>
	</bean>

</beans>